/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.4.0.0
 */
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Arborate
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	internal class GrammarParser : LRkParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly LRkAutomaton commonAutomaton = LRkAutomaton.Find(typeof(GrammarParser), "GrammarParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable function
			/// </summary>
			public const int VariableFunction = 0x0009;
			/// <summary>
			/// The unique identifier for variable program
			/// </summary>
			public const int VariableProgram = 0x000A;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x0009, "function"), 
			new Symbol(0x000A, "program"), 
			new Symbol(0x000B, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
 };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public GrammarParser(GrammarLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		public class Visitor
		{
			public virtual void OnTerminalWhiteSpace(ASTNode node) {}
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnTerminalLcurly(ASTNode node) {}
			public virtual void OnTerminalRcurly(ASTNode node) {}
			public virtual void OnTerminalKwFunc(ASTNode node) {}
			public virtual void OnTerminalKwEndfunc(ASTNode node) {}
			public virtual void OnVariableFunction(ASTNode node) {}
			public virtual void OnVariableProgram(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0003: visitor.OnTerminalWhiteSpace(node); break;
				case 0x0004: visitor.OnTerminalSeparator(node); break;
				case 0x0005: visitor.OnTerminalLcurly(node); break;
				case 0x0006: visitor.OnTerminalRcurly(node); break;
				case 0x0007: visitor.OnTerminalKwFunc(node); break;
				case 0x0008: visitor.OnTerminalKwEndfunc(node); break;
				case 0x0009: visitor.OnVariableFunction(node); break;
				case 0x000A: visitor.OnVariableProgram(node); break;
			}
		}
	}
}
